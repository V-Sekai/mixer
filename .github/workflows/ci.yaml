name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

env:
  MIXER_BASH_EXE: C:\Program Files\Git\bin\bash.exe
  VRTIST_PORT: 25600
  MIXER_TEST_OUTPUT: logs\tests

jobs:
  pre_release:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pep8-naming mypy sphinx sphinx-rtd-theme requests --constraint requirements-dev.txt

      - name: Run ruff
        run: |
          ruff -v mixer tests extra

      - name: Run mypy
        run: |
          mypy mixer
        continue-on-error: true

      #   - name: Build docs
      #     run: |
      #       sphinx-build -b html docs docs/_build/html
      #       rm -rf docs/_build/doctree

      - name: Zip files
        run: |
          cp CHANGELOG.md README.md LICENSE mixer/
          rm -rf mixer/blender_data/tests/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: blender_mixer
          path: |
            docs/_build
            mixer

      # - name: Install operating system dependencies
      #   run: |
      #     sudo apt install -y python3 blender

      # - name: Create local folders
      #   run: |
      #     mkdir -p gitlab/blender/cache

      # - name: Install Mixer in local blender
      #   run: |
      #     blender --background --python gitlab/install_mixer.py

      # - name: Install test dependencies
      #   run: |
      #     python3 -m pip install unittest-xml-reporting parameterized unittest2 xmlrunner

      # - name: Run tests within blender
      #   run: |
      #     blender --background --python-exit-code 1 --python-expr "\
      #     import bpy, os, unittest, xmlrunner; \
      #     bpy.ops.preferences.addon_enable(module='mixer'); \
      #     os.makedirs('logs/tests', exist_ok=True); \
      #     with open('logs/tests/blender_data.xml', 'wb') as output: \
      #         suite = unittest.defaultTestLoader.discover(os.path.dirname(os.path.realpath('mixer/blender_data/tests'))); \
      #         runner = xmlrunner.XMLTestRunner(verbosity=2, output=output); \
      #         result = runner.run(suite); \
      #         if not result.wasSuccessful(): \
      #             raise AssertionError('Tests failed')"
      #     python3 -m xmlrunner discover --verbose tests.vrtist -o $MIXER_TEST_OUTPUT
      #     python3 -m xmlrunner discover --verbose tests.broadcaster -o $MIXER_TEST_OUTPUT
      #     python3 -m xmlrunner discover --verbose tests.blender -o $MIXER_TEST_OUTPUT
