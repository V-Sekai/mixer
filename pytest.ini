[tool:pytest]
minversion = "8.0"
addopts =
    --strict-markers
    --strict-config
    --disable-warnings
    --tb=short
    --capture=no
    -x  # Stop on first failure for faster debugging
    --cov=tests/ --cov-report=term-missing
testpaths = tests
python_files =
    ["test_*.py", "tests/**/*.py"]
python_classes = ["*Test*", "Test*", "TestCase*", "TestImage*"]
python_functions = ["test_*"]
pythonpath = [".", "addons"]
asyncio_mode = auto

# Enhanced warning filtering for cleaner output
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore::ResourceWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*socket.*:ResourceWarning

# Extended test markers for better categorization
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    performance: marks tests for performance benchmarking
    vrtist_generic: marks tests using Generic VRtist protocol
    vrtist_vrtist: marks tests using VRtist protocol
    bench: marks tests for benchmarking
    bluetooth: marks tests requiring Bluetooth
    networking: marks tests requiring network connectivity
    blender: marks tests requiring Blender
    mock: marks tests using mocking
    unit: marks unit tests (fast, isolated)
    e2e: marks end-to-end tests (slow, integrated)
    fixture_stress: marks tests that stress fixture capabilities
    manual: marks tests requiring manual intervention

# Performance and resource settings
timeout = 300
timeout_method = thread
faulthandler_timeout = 30

# Cache settings for better reproducibility
cache_dir = .pytest_cache

# Log settings for debugging (can be overridden)
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# JUnit XML output for CI/CD integration
junit_family = xunit2
junit_suite_name = pytest_blender_tests

# Parallel execution settings (ready for pytest-xdist)
numprocesses = auto

# Coverage settings
# addopts = ... (coverage options above)
# omit = __pycache__/*
# exclude_lines =
#     pragma: no cover
#     def __repr__
#     if self.debug:
#     if settings.DEBUG
#     raise AssertionError
#     raise NotImplementedError
#     if 0:
#     if __name__ == .__main__.:

# Environment variables for test configuration
# PYTEST_DISABLE_PLUGIN_AUTOLOAD=1  # Disable automatic plugin loading
# PYTEST_PLUGINS=...  # Specify explicit plugins
# BLENDER_EXECUTABLE=path/to/blender  # Override blender executable
# TEST_MODE=headless  # Test mode: headless, interactive, or ci
